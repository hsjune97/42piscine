Advice
- retry!
- make cmp function as well.
- cmp could be change depend on the data type but don't need to be care
	- in this case they just took it for int type.

Caution
//////////////////////
#ifndef FT_LIST_H
# define FT_LIST_H //not defined

#endif

////////////////////////
void *pointer
- can take any type of pointer
void *vp = int *ip;
void *vp = char *cp;

- needed to be casted before use
pi=(int *)vp;
pd=(double *)vp;

- cannot use operators: *, +/-
- do not know how much move
printf("%d\n",*(int *)vp);

///////////////////
-Equal
p1->age;      // 화살표 연산자로 멤버에 접근
(*p1).age;    // 구조체 포인터를 역참조한 뒤 .으로 멤버에 접근
////////////////////////////////


void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)())
{//<<<<<<<<<----double pointer because it has pointer type as for its members
	t_list *curr;
	t_list *tmp;

	while (*begin_list && cmp((*begin_list)->data, data_ref) == 0)
	{
		//curr = *begin_list;<<<<<<<<<<----------------------??????
		*begin_list = (*begin_list)->next;
		//free(curr);<<<---------------------------------------????
	}
	curr = *begin_list;
	while (curr && curr->next)
	{
		if (cmp(curr->next->data, data_ref) == 0)
		{
			tmp = curr->next;
			curr->next = tmp->next;
			free(tmp);
		}
		curr = curr->next;
	}
}
