alpha_mirror.c
- modulize requires deep understaning of functions and pointers

<<<EX>>>
void	print_mirror(char *str)
{
	int i = 0;
	while (str[i])
	{
		if ('a' <= str[i] && str[i] <= 'z')
			str[i] = 'z' - (str[i] - 'a');
		else if ('A' <= str[i] && str[i] <= 'Z')
			str[i] = 'Z' - (str[i] - 'A');
		ft_putchar(str[i]);
		i++;
	}
}

do not modulize mirror parts

///////////////////////////////////////////
expand_str.char

<<<EX>>>
void	print_exp(char *str)
{
	int i = 0;
	int flag = 0;
	int len;
	len = ft_strlen(str);
	while (is_space(str[i]))
		i++;
	while (i < len) // <<<<<------------- use len or size
	{
		flag = 0;
		while (is_space(str[i]))
		{
			i++;
			flag = 1;
		}
		if (flag && str[i])
		{
			ft_putchar(' ');
			ft_putchar(' ');
			ft_putchar(' ');
		}
		if (i < len - 1) // <<------------do not print '\0'
			ft_putchar(str[i]);
		i++;
	}
}


/////////////////////////////////////////////
ft_list_foreach
// do not put *!

typedef struct s_list
{
	struct s_list *next;
	void		*data;
}				*t_list; //<<-------------(no!!!) -> t_list
// do not put * here!


(*f)(list_ptr->data);

void	ft_list_foreach(t_list *begin_list, void (*f)(void *))
// <<- type of data is void pointer(ft_list.h)
{
	t_list *curr;

	curr = begin_list;
	while (curr)
	{
		(*f)(curr->data);
		curr = curr->next;
	}
}
